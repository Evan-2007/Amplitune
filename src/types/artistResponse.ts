export type ArtistResponse =
  | {
      // appleMusic1 is the standard Apple Music API
      // appleMusic2 is music.apple.com internal API. Internal API is not avalilable in the borwser due to CORS policy
      type: 'appleMusic1';
      data: AppleArtistResponse1;
    }
  | {
      type: 'appleMusic2';
      data: AppleArtistResponse2;
    }
  | {
      type: 'tidal';
    };

//auto generated by quicktype
export interface AppleArtistResponse2 {
  data: Datum[];
  resources: Resources;
}

export interface Datum {
  id: string;
  type: Type;
  href: string;
  attributes?: DatumAttributes;
}

export interface DatumAttributes {
  artistBio?: string;
  artwork: Artwork;
  bornOrFormed?: string;
  editorialArtwork: PurpleEditorialArtwork;
  editorialVideo?: PurpleEditorialVideo;
  genreNames?: GenreName[];
  hero?: Hero[];
  isGroup?: boolean;
  name: string;
  origin?: string;
  url?: string;
  plainEditorialNotes?: PurplePlainEditorialNotes;
  audioTraits?: any[];
  curatorName?: string;
  editorialPlaylistKind?: string;
  editorialPlaylistSubKind?: string;
  hasCollaboration?: boolean;
  isChart?: boolean;
  lastModifiedDate?: Date;
  playParams?: PurplePlayParams;
  playlistType?: string;
  supportsSing?: boolean;
  trackCount?: number;
  airTime?: AirTime;
  durationInMillis?: number;
  isLive?: boolean;
  kind?: string;
  mediaKind?: string;
  radioUrl?: string;
  requiresSubscription?: boolean;
  streamingRadioSubType?: string;
  supportedDrms?: string[];
  artistName?: string;
  assetTokens?: AssetTokens;
  contentRatingsBySystem?: ContentRatingsBySystem;
  durationInMilliseconds?: number;
  postUrl?: string;
  uploadDate?: Date;
  uploadingArtistName?: string;
}

export interface AirTime {
  end: Date;
  start: Date;
}

export interface Artwork {
  bgColor: string;
  hasP3: boolean;
  height: number;
  textColor1: string;
  textColor2: string;
  textColor3: string;
  textColor4: string;
  url: string;
  width: number;
  gradient?: Gradient;
  textGradient?: string[];
  recommendedCropCodes?: RecommendedCropCode[];
}

export interface Gradient {
  color?: string;
  y2?: number;
}

export enum RecommendedCropCode {
  VB = 'vb',
  Va = 'va',
  Vc = 'vc',
  Vd = 'vd',
  Vf = 'vf',
}

export interface AssetTokens {
  '1080pHdVideo': string;
  sd480pVideo: string;
  sdVideo: string;
  sdVideoWithPlusAudio: string;
}

export interface ContentRatingsBySystem {}

export interface PurpleEditorialArtwork {
  subscriptionHero?: Artwork;
  bannerUber?: Artwork;
  storeFlowcase?: Artwork;
  subscriptionCover?: Artwork;
  superHeroTall?: Artwork;
  superHeroWide?: Artwork;
}

export interface PurpleEditorialVideo {
  motionArtistFullscreen16x9?: Motion;
  motionArtistSquare1x1?: Motion;
  motionArtistWide16x9?: Motion;
}

export interface Motion {
  previewFrame: Artwork;
  video: string;
}

export enum GenreName {
  HipHopRap = 'Hip-Hop/Rap',
  KPop = 'K-Pop',
  Music = 'Music',
  Pop = 'Pop',
  Rap = 'Rap',
  Rock = 'Rock',
  SingerSongwriter = 'Singer/Songwriter',
  SoftRock = 'Soft Rock',
  SpokenWord = 'Spoken Word',
}

export interface Hero {
  content: Content[];
}

export interface Content {
  artwork: Artwork;
}

export interface PurplePlainEditorialNotes {
  name?: string;
  short?: string;
  standard?: string;
  tagline?: string;
}

export interface PurplePlayParams {
  id: string;
  kind: string;
  versionHash?: string;
  format?: string;
  hasDrm?: boolean;
  mediaType?: number;
  stationHash?: string;
  streamingKind?: number;
}

export enum Type {
  Albums = 'albums',
  Artists = 'artists',
  MusicVideos = 'music-videos',
  Playlists = 'playlists',
  Songs = 'songs',
  Stations = 'stations',
  UploadedVideos = 'uploaded-videos',
}

export interface Resources {
  albums: { [key: string]: Album };
  artists: { [key: string]: Artist };
  'music-videos': { [key: string]: MusicVideo };
  songs: { [key: string]: Song };
  stations?: { [key: string]: Datum };
  'uploaded-videos'?: any;
  playlists?: any;
}

export interface Album {
  id: string;
  type: Type;
  href: string;
  attributes: AlbumAttributes;
  meta: AlbumMeta;
}

export interface AlbumAttributes {
  artistName: string;
  artwork: Artwork;
  audioTraits: AudioTrait[];
  contentRating?: string;
  copyright: string;
  editorialArtwork: FluffyEditorialArtwork;
  genreNames: string[];
  isCompilation: boolean;
  isComplete: boolean;
  isMasteredForItunes: boolean;
  isPrerelease: boolean;
  isSingle: boolean;
  name: string;
  playParams: FluffyPlayParams;
  recordLabel: string;
  releaseDate: Date;
  trackCount: number;
  upc: string;
  url: string;
  plainEditorialNotes?: PurplePlainEditorialNotes;
  editorialVideo?: FluffyEditorialVideo;
}

export enum AudioTrait {
  Atmos = 'atmos',
  Lossless = 'lossless',
  LossyStereo = 'lossy-stereo',
  Spatial = 'spatial',
}

export interface FluffyEditorialArtwork {
  storeFlowcase?: Artwork;
  subscriptionHero?: Artwork;
  staticDetailSquare?: Artwork;
  staticDetailTall?: Artwork;
  superHeroTall?: Artwork;
}

export interface FluffyEditorialVideo {
  motionDetailSquare: Motion;
  motionDetailTall: Motion;
  motionSquareVideo1x1: Motion;
}

export interface FluffyPlayParams {
  id: string;
  kind: Kind;
}

export enum Kind {
  Album = 'album',
  MusicVideo = 'musicVideo',
  Song = 'song',
  UploadedVideo = 'uploadedVideo',
}

export interface AlbumMeta {
  contentVersion: ContentVersion;
}

export interface ContentVersion {
  MZ_INDEXER: number;
  RTCI: number;
}

export interface Artist {
  id: string;
  type: Type;
  href: string;
  attributes?: DatumAttributes;
  relationships?: ArtistRelationships;
  views?: { [key: string]: View };
  meta?: ArtistMeta;
}

export interface ArtistMeta {
  views: Views;
}

export interface Views {
  order: string[];
}

export interface ArtistRelationships {
  bands: Bands;
  persons: Bands;
}

export interface Bands {
  href: string;
  data: Datum[];
}

export interface View {
  href: string;
  attributes: ViewAttributes;
  data: Datum[];
  next?: string;
}

export interface ViewAttributes {
  title: string;
}

export interface MusicVideo {
  id: string;
  type: Type;
  href: string;
  attributes: MusicVideoAttributes;
  relationships: MusicVideoRelationships;
}

export interface MusicVideoAttributes {
  artistName: string;
  artwork: Artwork;
  durationInMillis: number;
  editorialArtwork: TentacledEditorialArtwork;
  genreNames: GenreName[];
  has4K: boolean;
  hasHDR: boolean;
  isrc: string;
  name: string;
  playParams: FluffyPlayParams;
  previews: PurplePreview[];
  releaseDate: Date;
  url: string;
  videoTraits: VideoTrait[];
  albumName?: string;
  discNumber?: number;
  trackNumber?: number;
  plainEditorialNotes?: FluffyPlainEditorialNotes;
}

export interface TentacledEditorialArtwork {
  subscriptionHero?: Artwork;
  superHeroTall?: Artwork;
  superHeroWide?: Artwork;
  subscriptionCover?: Artwork;
}

export interface FluffyPlainEditorialNotes {
  short: string;
}

export interface PurplePreview {
  artwork: Artwork;
  hlsUrl: string;
  url: string;
}

export enum VideoTrait {
  The4K = '4K',
}

export interface MusicVideoRelationships {
  artists: Bands;
}

export interface Song {
  id: string;
  type: Type;
  href: string;
  attributes: SongAttributes;
  relationships: SongRelationships;
  meta: AlbumMeta;
}

export interface SongAttributes {
  albumName: string;
  artistName: string;
  artwork: Artwork;
  audioLocale: AudioLocale;
  audioTraits: AudioTrait[];
  discNumber: number;
  durationInMillis: number;
  editorialArtwork: StickyEditorialArtwork;
  extendedAssetUrls: ExtendedAssetUrls;
  genreNames: GenreName[];
  hasLyrics: boolean;
  hasTimeSyncedLyrics: boolean;
  isAppleDigitalMaster: boolean;
  isMasteredForItunes: boolean;
  isVocalAttenuationAllowed: boolean;
  isrc: string;
  name: string;
  playParams: FluffyPlayParams;
  previews: FluffyPreview[];
  releaseDate: Date;
  trackNumber: number;
  url: string;
  composerName?: string;
  contentRating?: string;
  plainEditorialNotes?: FluffyPlainEditorialNotes;
}

export enum AudioLocale {
  EnUS = 'en-US',
  Ko = 'ko',
}

export interface StickyEditorialArtwork {
  storeFlowcase?: Artwork;
  subscriptionHero?: Artwork;
}

export interface ExtendedAssetUrls {
  enhancedHls: string;
  lightweight: string;
  lightweightPlus: string;
  plus: string;
  superLightweight: string;
}

export interface FluffyPreview {
  url: string;
}

export interface SongRelationships {
  albums: Bands;
  artists: Bands;
}

// standard Apple Music API response

export interface AppleArtistResponse1 {
  id: string;
  type: string;
  href: string;
  attributes: Attributes;
  relationships: Relationships;
}

export interface Artwork1 {
  bgColor: string;
  height: number;
  textColor1: string;
  textColor2: string;
  textColor3: string;
  textColor4: string;
  url: string;
  width: number;
}

export interface Attributes {
  artwork: Artwork1;
  genreNames: string[];
  name: string;
  url: string;
}

export interface Relationships {
  albums: Albums;
  songs: Songs;
  gebres: Genres;
  'music-videos': MusicVideos;
}

export interface Albums {
  next: string;
  href: string;
  data: AlbumData[];
}

interface AlbumData {
  id: string;
  type: string;
  href: string;
  attributes: AlbumAttributes1;
}
interface PlayParams {
  id: string;
  kind: string;
}

interface AlbumAttributes1 {
  artistName: string;
  artwork: Artwork1;
  genreNames: string[];
  coppyright: string;
  isCompilation: boolean;
  isComplete: boolean;
  isMasteredForItunes: boolean;
  isSingle: boolean;
  name: string;
  playParams: PlayParams;
  recordLabel: string;
  releaseDate: string;
  trackCount: number;
  upc: string;
  url: string;
}

interface Genres {
  next: string;
  href: string;
  data: GenreData[];
}

interface GenreData {
  id: string;
  type: string;
  href: string;
  attributes: GenreAttributes;
}

interface GenreAttributes {
  name: string;
  parentId: string;
  parentName: string;
}

interface MusicVideos {
  next: string;
  href: string;
  data: MusicVideoData[];
}

interface MusicVideoData {
  id: string;
  type: string;
  href: string;
  attributes: MusicVideoAttributes1;
}

interface MusicVideoAttributes1 {
  artistName: string;
  artwork: Artwork1;
  durationInMillis: number;
  genreNames: string[];
  has4K: boolean;
  hasHDR: boolean;
  isrc: string;
  name: string;
  playParams: PlayParams;
  previews: Preview[];
  releaseDate: string;
  url: string;
}

interface Preview {
  artwork: Artwork1;
  hlsUrl: string;
  url: string;
}

interface Songs {
  href: string;
  next: string;
  data: SongData[];
}

interface SongData {
  id: string;
  type: string;
  href: string;
  attributes: SongAttributes1;
}

interface SongAttributes1 {
  albumName: string;
  artistName: string;
  artwork: Artwork1;
  composerName: string;
  discNumber: number;
  durationInMillis: number;
  editorialNotes: any; //add type later
  genreNames: string[];
  hasLyrics: boolean;
  isAppleDigitalMaster: boolean;
  isrc: string;
  name: string;
  playParams: PlayParams;
  previews: Preview[];
  releaseDate: string;
  trackNumber: number;
  url: string;
  relationships: any; //add type later
}
